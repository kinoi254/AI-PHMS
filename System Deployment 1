
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import IsolationForest

app = Flask(__name__)

# Load the model and scaler
model = IsolationForest(contamination=0.1)
scaler = MinMaxScaler()

# Train the model
data = {
    'timestamp': pd.date_range(start='2023-10-01', periods=100, freq='T'),
    'heart_rate': np.random.randint(60, 100, 100),
    'blood_oxygen': np.random.randint(90, 100, 100),
    'activity_level': np.random.choice(['low', 'moderate', 'high'], 100)
}
df = pd.DataFrame(data)
activity_level_map = {'low': 0, 'moderate': 1, 'high': 2}
df['activity_level'] = df['activity_level'].map(activity_level_map)
df[['heart_rate', 'blood_oxygen']] = scaler.fit_transform(df[['heart_rate', 'blood_oxygen']])
model.fit(df[['heart_rate', 'blood_oxygen', 'activity_level']])

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    df = pd.DataFrame([data])
    df[['heart_rate', 'blood_oxygen']] = scaler.transform(df[['heart_rate', 'blood_oxygen']])
    prediction = model.predict(df[['heart_rate', 'blood_oxygen', 'activity_level']])
    if prediction[0] == -1:
        return jsonify({'anomaly': 'Anomaly'})
    else:
        return jsonify({'anomaly': 'Normal'})

if __name__ == '__main__':
    app.run(debug=True)
