import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Simulate new data
new_data = {
    'timestamp': pd.date_range(start='2023-10-02', periods=10, freq='T'),
    'heart_rate': np.random.randint(60, 100, 10),
    'blood_oxygen': np.random.randint(90, 100, 10),
    'activity_level': np.random.choice(['low', 'moderate', 'high'], 10)
}

new_df = pd.DataFrame(new_data)

# Convert activity level to numerical values
activity_level_map = {'low': 0, 'moderate': 1, 'high': 2}
new_df['activity_level'] = new_df['activity_level'].map(activity_level_map)

# Normalize heart rate and blood oxygen levels
scaler = MinMaxScaler()
new_df[['heart_rate', 'blood_oxygen']] = scaler.fit_transform(new_df[['heart_rate', 'blood_oxygen']])

# Anomaly detection using Isolation Forest
model = IsolationForest(contamination=0.1)
new_df['anomaly'] = model.fit_predict(new_df[['heart_rate', 'blood_oxygen', 'activity_level']])

# Label anomalies
new_df['anomaly'] = new_df['anomaly'].apply(lambda x: 'Anomaly' if x == -1 else 'Normal')

# Evaluate model performance
y_true = new_df['anomaly'].apply(lambda x: 1 if x == 'Anomaly' else 0)
y_pred = model.predict(new_df[['heart_rate', 'blood_oxygen', 'activity_level']])
y_pred = np.where(y_pred == -1, 1, 0)

accuracy = accuracy_score(y_true, y_pred)
precision = precision_score(y_true, y_pred)
recall = recall_score(y_true, y_pred)

print(f'Accuracy: {accuracy:.3f}')
print(f'Precision: {precision:.3f}')
print(f'Recall: {recall:.3f}')

# Update model with new data
# ...

# Alert system
def send_alert(row):
    if row['anomaly'] == 'Anomaly':
        # Send alert to user and administrator
        print(f'Alert: Anomaly detected for user at {row["timestamp"]}')

new_df.apply(send_alert, axis=1)
